how to implement sign extended guest registers:

before processing a statement, preprocess it by wrapping every guest register
access into a sex.  also, wrap all the rhss of assignments to guest registers
into sexes.  generate all forms, prune them, etc, and before matching,
remove the sex wrappers around registers, if there are any left.

there should also be a simplify rule that says that sex is idempotent.

---

Ich hab' jetzt meine Monad etwas aufgepeppelt.  Das Problem ist, dass
ich auch mit Failure umgehen muss, aber nicht nur das, ich muss auch
zwischen Unconditional und Conditional Failure unterscheiden.

Die ganze Action passiert beim Matchen von Expressions gegen Patterns
(nicht OCaml Patterns, sondern meine eigenen).  Ein solches Matchen
kann klarerweise fehlschlagen, und zwar entweder aus einem Grund, der
gar nix mit den Immediates zu tun hat, wie zb wenn ich ein Shift Left
mit einem Shift Right matche, oder eben weil ein Immediate den
"falschen" Wert hat, wenn ich zb einen Immediate gegen 0 matche, und
der eben gerade nicht 0 ist.  Ersteres ist ein Unconditional Failure,
letzteres ein Conditional Failure.

Bei einem Conditional Failure muss ich mir noch zusaetzlich den Grund
fuer den Fehlschlag merken, und auch alle Conditions, die erfuellt
waren, bis es zu dem Failure kam.  Ich brauch' diese ganzen
zusaetzlichen Spielereien in erster Linie beim Vereinfachen von
Expressions (mit "simplify", nicht "prune").  Das ist nix anderes als
eine Liste von Transformationsregeln, die der Reihe nach ausprobiert
werden, wie zb

  a + 0 -> a
  shiftl 0 a -> 0

Wenn ich jetzt eine Regel ausprobiere, wie zb

  a + 0 -> a

und die matched nicht, weil rechts ein Immediate steht, der nicht 0
ist, kann ich trotzdem noch andere Regeln versuchen, wie zb

  0 + a -> a
