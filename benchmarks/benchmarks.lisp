(load "let-match")

(defun dcs (x)
  (substitute #\d #\. (substitute #\p #\+ (substitute #\_ #\- (string-downcase (symbol-name x))))))

(defparameter *configs* nil)
(defparameter *benchmarks* nil)

(defun make-script (config benchmark)
  (with-open-file (out (format nil "bench.~A.~A" (dcs benchmark) (dcs config)) :direction :output :if-exists :supersede)
    (let ((*standard-output* out)
	  (commands (cdr (assoc config *configs*)))
	  (cmdline (cadr (assoc benchmark *benchmarks*)))
	  (files (cddr (assoc benchmark *benchmarks*)))
	  (run-commands '((unless (exists) (exec))))
	  (current-run nil)
	  (default-name (format nil "out.~~A.~A.~~A" (dcs config))))
      (labels ((exec (command)
		 (case-match command
		   ((make ?makefile)
		    (format t "make -f benchmarks/~A clean~%make -f benchmarks/~:*~A all~%cksum bintrans~%" makefile))
		   ((exec . ?args)
		    (let ((out-file (or (car args) default-name)))
		      (format t "cd benchrun~%time ~A >&../benchmarks/~A~%cd ..~%" cmdline (format nil out-file (dcs benchmark) current-run))))
		   ((run . ?new-run-commands)
		    (setq run-commands new-run-commands))
		   ((runs ?n)
		    (dotimes (i n)
		      (setq current-run i)
		      (dolist (run-command run-commands)
			(exec run-command))))
		   ((rm ?file)
		    (format t "rm -f benchrun/~A~%" file))
		   ((unless (exists . ?args) . ?body)
		    (let ((file-name (or (car args) default-name)))
		      (format t "if [ ! -f benchmarks/~A ] ; then~%" (format nil file-name (dcs benchmark) current-run))
		      (dolist (command body)
			(exec command))
		      (format t "fi~%")))
		   ((static-liveness)
		    (format t "./alive benchrun/cfg.txt /tmp/liveness.txt~%./convert_liveness </tmp/liveness.txt >benchrun/liveness.out~%"))
		   ((name ?name)
		    (setq default-name name))
		   (t
		    (error "unknown command ~A" command)))))
	(assert (and (not (null commands)) (not (null cmdline))))
	(format t "#!/bin/bash~%mkdir -p benchrun~%cd benchrun~%rm -rf *~%cd ..~%")
	(dolist (file files)
	  (format t "cp ~A benchrun/~%" file))
	(dolist (command commands)
	  (exec command))))))

(defun make-all-scripts ()
  (with-open-file (out "bench.all" :direction :output :if-exists :supersede)
    (format out "#!/bin/bash~%")
    (dolist (config *configs*)
      (dolist (benchmark *benchmarks*)
	(make-script (car config) (car benchmark))
	(format out "sh benchmarks/bench.~A.~A~%" (dcs (car benchmark)) (dcs (car config)))))))

(defmacro defconfig (name &rest commands)
  `(setq *configs* (acons ',name ',commands *configs*)))

(defmacro defbenchmark (name cmdline &optional files)
  `(setq *benchmarks* (acons ',name (cons ,cmdline ',files) *benchmarks*)))

(defconfig noliveness
  (make "Makefile.noliveness")
  (runs 5)
  (make "Makefile.noliveness \"BENCHDEFS=-DCOUNT_INSNS -DCOUNT_LOAD_STORES\"")
  (name "out.~A.noliveness.~A.count")
  (runs 1))

(defconfig liveness0
  (make "Makefile.liveness0 BENCHDEFS=-DDUMP_CFG")
  (exec "out.~A.liveness0.static.collect")
  (static-liveness)
  (make "Makefile.liveness0")
  (name "out.~A.liveness0.static.~A")
  (runs 5)
  (make "Makefile.liveness0 \"BENCHDEFS=-DCOUNT_INSNS -DCOUNT_LOAD_STORES\"")
  (name "out.~A.liveness0.static.~A.count")
  (runs 1)
  (make "Makefile.liveness0")
  (run
   (unless (exists "out.~A.liveness0.~A.4")
     (rm "liveness.out")
     (exec "out.~A.liveness0.~A.0")
     (exec "out.~A.liveness0.~A.1")
     (exec "out.~A.liveness0.~A.2")
     (exec "out.~A.liveness0.~A.3")
     (exec "out.~A.liveness0.~A.4")))
  (runs 5)
  (make "Makefile.liveness0 \"BENCHDEFS=-DCOUNT_INSNS -DCOUNT_LOAD_STORES\"")
  (run
   (unless (exists "out.~A.liveness0.~A.4.count")
     (rm "liveness.out")
     (exec "out.~A.liveness0.~A.0.count")
     (exec "out.~A.liveness0.~A.1.count")
     (exec "out.~A.liveness0.~A.2.count")
     (exec "out.~A.liveness0.~A.3.count")
     (exec "out.~A.liveness0.~A.4.count")))
  (runs 1))

(defconfig liveness1
  (make "Makefile.liveness1 BENCHDEFS=-DDUMP_CFG")
  (exec "out.~A.liveness1.static.collect")
  (static-liveness)
  (make "Makefile.liveness1")
  (name "out.~A.liveness1.static.~A")
  (runs 5)
  (make "Makefile.liveness1 \"BENCHDEFS=-DCOUNT_INSNS -DCOUNT_LOAD_STORES\"")
  (name "out.~A.liveness1.static.~A.count")
  (runs 1)
  (make "Makefile.liveness1")
  (run
   (unless (exists "out.~A.liveness1.~A.4")
     (rm "liveness.out")
     (exec "out.~A.liveness1.~A.0")
     (exec "out.~A.liveness1.~A.1")
     (exec "out.~A.liveness1.~A.2")
     (exec "out.~A.liveness1.~A.3")
     (exec "out.~A.liveness1.~A.4")))
  (runs 5)
  (make "Makefile.liveness1 \"BENCHDEFS=-DCOUNT_INSNS -DCOUNT_LOAD_STORES\"")
  (run
   (unless (exists "out.~A.liveness1.~A.4.count")
     (rm "liveness.out")
     (exec "out.~A.liveness1.~A.0.count")
     (exec "out.~A.liveness1.~A.1.count")
     (exec "out.~A.liveness1.~A.2.count")
     (exec "out.~A.liveness1.~A.3.count")
     (exec "out.~A.liveness1.~A.4.count")))
  (runs 1))

(defbenchmark compress "../bintrans /bin/compress95 <../compress.inputs/bigtest.in")
(defbenchmark m88ksim "../bintrans /bin/m88ksim <ctl.raw"
  ("m88ksim.inputs/ctl.raw" "m88ksim.inputs/*.big"))
(defbenchmark go_5stone21 "../bintrans /bin/go 50 21 <../go.inputs/ref/5stone21.in")
(defbenchmark go_9stone21 "../bintrans /bin/go 50 21 <../go.inputs/ref/9stone21.in")
(defbenchmark xlisp "../bintrans /bin/xlisp <../xlisp.inputs/full.lsp")
(defbenchmark vortex "../bintrans /bin/vortex vortex.in"
  ("vortex.inputs/ref/input/bendian.*"
   "vortex.inputs/ref/input/persons.1k"
   "vortex.inputs/ref/input/vortex.in"))
(defbenchmark ijpeg_specmun "../bintrans /bin/ijpeg -image_file ../ijpeg.inputs/ref/input/specmun.ppm -compression.quality 90 -compression.optimize_coding 0 -compression.smoothing_factor 90 -difference.image 1 -difference.x_stride 10 -difference.y_stride 10 -verbose 1 -GO.findoptcomp")

;;ijpeg vigo
;;ijpeg penguin

(defbenchmark perl_primes "../bintrans /bin/perl ../perl.inputs/ref/input/primes.pl <../perl.inputs/ref/input/primes.in")
(defbenchmark perl_scrabbl "../bintrans /bin/perl ../perl.inputs/ref/input/scrabbl.pl <../perl.inputs/ref/input/scrabbl.in"
  ("perl.inputs/ref/input/dictionary"))

;;(defbenchmark imc "../bintrans /bin/imc 10")
